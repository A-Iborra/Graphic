// Copyright 2018 InnoVisioNate Inc. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import "oaidl.idl";

#include <olectl.h>

[ 
   uuid(8CAEFDCE-55E6-11d3-8365-006008BD5BC3),
   helpfile("Text.hlp"),
   helpstring("G System, Text Type Library"), 
   lcid(0x00000000), 
   version(1.0),
   control
] 
library Text { 

   importlib(STDOLE_TLB); 
   importlib(STDTYPE_TLB);

   importlib("Properties.tlb");
   importlib("GSystem.tlb");
   importlib("GraphicControl.tlb");
   importlib("OpenGLImplementation.tlb");
   importlib("DataSet.tlb");
   importlib("Variable.tlb");
   importlib("Evaluator.tlb");
   importlib("Plot.tlb");

   enum TextPropertiesID {
      textPropertyText = 0,
      textPropertyLength = 1,
      textPropertyFormat = 2,
      textPropertyFont = 3,
      textPropertySizeProperty = 4,
      textPropertySize = 5,
      textPropertySizeUnits = 6,
      textPropertyPosition = 7,
      textPropertyPositionX = 8,
      textPropertyPositionY = 9,
      textPropertyPositionZ = 10,
      textPropertyWindowPosition = 11,
      textPropertyColor = 20,
      textPropertyLineWeight = 21,
      textPropertySegmentiD = 22,
      textPropertyActionTable = 23,
      textPropertyCoordinatePlane = 24,
      textPropertyFlipHorizontal = 25,
      textPropertyFlipVertical = 26,
      textPropertyRotation = 27,
      textPropertyMinX = 28,
      textPropertyMinY = 29,
      textPropertyMinZ = 30,
      textPropertyMaxX = 31,
      textPropertyMaxY = 32,
      textPropertyMaxZ = 33,
      textPropertyPartOfWorldDomain = 34,
      textPropertyDescription = 35,
      textpropertyPartOfMainGraphic = 36,
      textPropertyShowContentPropertyPage = 37,
      textPropertyShowStylePropertyPage = 38,
      textPropertyShowOrientationPropertyPage = 39,
      textPropertyEnablePositionSettings = 40,
      textPropertyShowPositionSettings = 41,
      textPropertyTextNotify = 42,
      textPropertyPositionString = 43};

   enum TextMethodsID {
      textMethodInitialize = 101,
      textMethodGetTextList = 102,
      textMethodPrepData = 103,
      textMethodDraw = 104,
      textMethodRedraw = 105,
      textMethodErase = 106,
      textMethodAdviseGSystemStatusBar = 107,
      textMethodPrepText = 108,
      textMethodEditProperties = 109  };

   interface ITextNotify;

   [  uuid(8CAEFDCF-55E6-11d3-8365-006008BD5BC3),
      helpstring("The Text Interface"),
      pointer_default(unique)
   ] 
   interface IText : IDispatch {

     [propput,id(textPropertyText),helpstring("")] HRESULT Text([in] BSTR setText);
     [propget,id(textPropertyText),helpstring("")] HRESULT Text([out,retval] BSTR *getText);

     [propput,id(textPropertyFormat),helpstring("")] HRESULT Format([in] long setTextFormat);
     [propget,id(textPropertyFormat),helpstring("")] HRESULT Format([out,retval] long * getTextFormat);

     [propput,id(textPropertyFont),helpstring("")] HRESULT Font([in] BSTR fontName);
     [propget,id(textPropertyFont),helpstring("")] HRESULT Font([out,retval] BSTR *fontName);

     [propput,hidden,id(textPropertySizeProperty),helpstring("")] HRESULT SizeProperty([in] IGProperty *pPropertySize,[in] IGProperty* pPropertySizeUnits);

     [propput,id(textPropertySize),helpstring("")] HRESULT Size([in]double pSize);
     [propget,id(textPropertySize),helpstring("")] HRESULT Size([out,retval]double *pSize);

     [propput,id(textPropertySizeUnits),helpstring("")] HRESULT SizeUnits([in]enum TextSizeUnits sizeUnits);
     [propget,id(textPropertySizeUnits),helpstring("")] HRESULT SizeUnits([out,retval]enum TextSizeUnits *pSizeUnits);

     [propput,id(textPropertyPosition),helpstring("")] HRESULT Position([in]SAFEARRAY(BSTR) pStringArrayContainingPosition);
     [propget,id(textPropertyPosition),helpstring("")] HRESULT Position([out,retval]SAFEARRAY(BSTR) *ppStringArrayContainingPosition);

     [propput,id(textPropertyPositionString),helpstring("")] HRESULT PositionString([in]BSTR pStringContainingPosition);
     [propget,id(textPropertyPositionString),helpstring("")] HRESULT PositionString([out,retval]BSTR *ppStringContainingPosition);

     [propput,id(textPropertyPositionX),helpstring("")] HRESULT PositionX([in]double scalarValue);
     [propget,id(textPropertyPositionX),helpstring("")] HRESULT PositionX([out,retval]double *pScalarValue);

     [propput,id(textPropertyPositionY),helpstring("")] HRESULT PositionY([in]double scalarValue);
     [propget,id(textPropertyPositionY),helpstring("")] HRESULT PositionY([out,retval]double *pScalarValue);

     [propput,id(textPropertyPositionZ),helpstring("")] HRESULT PositionZ([in]double scalarValue);
     [propget,id(textPropertyPositionZ),helpstring("")] HRESULT PositionZ([out,retval]double *pScalarValue);

     [propput,id(textPropertyWindowPosition),helpstring("")] HRESULT WindowPosition([in] POINTL *putWindowPoint);
     [propget,id(textPropertyWindowPosition),helpstring("")] HRESULT WindowPosition([out,retval] POINTL *getWindowPoint);

     [propput,id(textPropertyColor),helpstring("")] HRESULT Color([in]SAFEARRAY(double) color);
     [propget,id(textPropertyColor),helpstring("")] HRESULT Color([out,retval]SAFEARRAY(double) *pColor);

     [propput,id(textPropertyLineWeight),helpstring("")] HRESULT LineWeight([in]double lineWeight);
     [propget,id(textPropertyLineWeight),helpstring("")] HRESULT LineWeight([out,retval]double *pLineWeight);

     [propget,id(textPropertySegmentID),helpstring("")] HRESULT SegmentID([out,retval] long *pID);

     [propget,id(textPropertyActionTable),helpstring("")] HRESULT ActionTable([out,retval] IGraphicSegmentAction**);

     [propput,id(textPropertyCoordinatePlane),helpstring("")] HRESULT CoordinatePlane([in] enum CoordinatePlane);
     [propget,id(textPropertyCoordinatePlane),helpstring("")] HRESULT CoordinatePlane([out,retval] enum CoordinatePlane*);

     [propput,id(textPropertyFlipHorizontal),helpstring("")] HRESULT FlipHorizontal([in]VARIANT_BOOL);
     [propget,id(textPropertyFlipHorizontal),helpstring("")] HRESULT FlipHorizontal([out,retval]VARIANT_BOOL *);

     [propput,id(textPropertyFlipVertical),helpstring("")] HRESULT FlipVertical([in]VARIANT_BOOL);
     [propget,id(textPropertyFlipVertical),helpstring("")] HRESULT FlipVertical([out,retval]VARIANT_BOOL *);

     [propput,id(textPropertyRotation),helpstring("Rotate the text x degrees counter-clockwise from the forward direction on the coordinate plane")]
      HRESULT Rotation([in]double rotation);
     [propget,id(textPropertyRotation)]
      HRESULT Rotation([out,retval] double *pRotation);

     [propget,id(textPropertyMinX),helpstring("")] HRESULT minX([out,retval] double*);
     [propget,id(textPropertyMinY),helpstring("")] HRESULT minY([out,retval] double*);
     [propget,id(textPropertyMinZ),helpstring("")] HRESULT minZ([out,retval] double*);

     [propget,id(textPropertyMaxX),helpstring("")] HRESULT maxX([out,retval] double*);
     [propget,id(textPropertyMaxY),helpstring("")] HRESULT maxY([out,retval] double*);
     [propget,id(textPropertyMaxZ),helpstring("")] HRESULT maxZ([out,retval] double*);

     [propput,id(textPropertyPartOfWorldDomain),helpstring("")] HRESULT PartOfWorldDomain([in]VARIANT_BOOL bIsPart);
     [propget,id(textPropertyPartOfWorldDomain),helpstring("")] HRESULT PartOfWorldDomain([out,retval]VARIANT_BOOL *pbIsPart);

     [propput,id(textPropertyDescription),helpstring("")] HRESULT Description([in]BSTR textDescription);
     [propget,id(textPropertyDescription),helpstring("")] HRESULT Description([out,retval]BSTR *pTextDescription);

     [propput,id(textPropertyPartOfMainGraphic),helpstring("")] HRESULT PartOfMainGraphic([in]VARIANT_BOOL boolFalseToPreventDrawingOnMainGraphic);
     [propget,id(textPropertyPartOfMainGraphic),helpstring("")] HRESULT PartOfMainGraphic([out,retval]VARIANT_BOOL* pBoolFalseToPreventDrawingOnMainGraphic);

     [propget,id(1001),hidden] HRESULT SegmentCount([in]long *);
     [hidden] HRESULT GetSegments([in]long *);

     [helpstring("Set the property that supplies the color of text."),id(101)] 
     HRESULT TextColorProperty([in]IGProperty* pIPropertyTextColor);

     [propput,id(textPropertyShowContentPropertyPage),helpstring("Prevent the text property pages from showing the content property page")]
     HRESULT ShowContentPropertyPage([in]VARIANT_BOOL bShow);
     [propget,id(textPropertyShowContentPropertyPage),helpstring("Prevent the text property pages from showing the content property page")]
     HRESULT ShowContentPropertyPage([out,retval]VARIANT_BOOL *pbShow);

     [propput,id(textPropertyShowStylePropertyPage),helpstring("Prevent the text property pages from showing the style property page")]
     HRESULT ShowStylePropertyPage([in]VARIANT_BOOL bShow);
     [propget,id(textPropertyShowStylePropertyPage),helpstring("Prevent the text property pages from showing the style property page")]
     HRESULT ShowStylePropertyPage([out,retval]VARIANT_BOOL *pbShow);

     [propput,id(textPropertyShowOrientationPropertyPage),helpstring("Prevent the text property pages from showing the orientation property page")]
     HRESULT ShowOrientationPropertyPage([in]VARIANT_BOOL bShow);
     [propget,id(textPropertyShowOrientationPropertyPage),helpstring("Prevent the text property pages from showing the orientation property page")]
     HRESULT ShowOrientationPropertyPage([out,retval]VARIANT_BOOL *pbShow);

     [propput,id(textPropertyEnablePositionSettings),helpstring("Enable or disable the absolute positioning settings on the text's property settings dialog")]
     HRESULT EnablePositionSettings([in]VARIANT_BOOL bEnable);
     [propget,id(textPropertyEnablePositionSettings),helpstring("Enable or disable the absolute positioning settings on the text's property settings dialog")]
     HRESULT EnablePositionSettings([out,retval]VARIANT_BOOL *pbEnable);

     [propput,id(textPropertyShowPositionSettings),helpstring("Show or hide the absolute positioning settings on the text's property settings dialog")]
     HRESULT ShowPositionSettings([in]VARIANT_BOOL bEnable);
     [propget,id(textPropertyShowPositionSettings),helpstring("Show or hide the absolute positioning settings on the text's property settings dialog")]
     HRESULT ShowPositionSettings([out,retval]VARIANT_BOOL *pbEnable);

     [propput,id(textPropertyTextNotify),helpstring("")]
     HRESULT TextNotify(ITextNotify* pITextNotify);

     [id(102)] HRESULT Initialize(IOpenGLImplementation *,IEvaluator *,IDataSet *,
                                    IGProperty* pPropXFloor,IGProperty* pPropXCeiling,
                                    IGProperty* pPropYFloor,IGProperty* pPropYCeiling,
                                    IGProperty* pPropZFloor,IGProperty* pPropZCeiling,
                                    char *text,struct DataPoint *position,
                                    [in] void (*pWhenChangedCallback)(void *,ULONG_PTR),[in] void *pWhenChangedArg,[in] ULONG_PTR whenChangedCookie);

     [id(103)] HRESULT PrepData();

     [id(104)] HRESULT Draw();

     [id(105)] HRESULT Erase();

     [id(106)] HRESULT Redraw();

     [id(107),helpstring("Provide an implementation of IGSystemStatusBar to this method - the interface is not AddRef()ed")]
     HRESULT AdviseGSystemStatusBar(IGSystemStatusBar*);

     [id(108),helpstring("Edit the text properties")]
     HRESULT EditProperties();

     [id(109),helpstring("Copy the text and all of it's properties from another text object")]
     HRESULT CopyFrom(IText* pIText_Source);

     [propget,id(110),helpstring("Retrieve the bounding box (in GDI Coordinates), of the text. Not valid until after PrepText is called.")]
     HRESULT GDIBoundingBox([out,retval] RECT *);

     [propput,id(110),helpstring("Set the bounding box (in GDI Coordinates), of the text. Should be set after PrepText is called because this will override where Prep text puts it.")]
     HRESULT GDIBoundingBox([in] RECT *);


     [id(111),helpstring("Move the text one line height above where it is")]
     HRESULT LineUp();

     [propget,id(112),helpstring("Retrieve a pointer to the text dataset")]
     HRESULT DataSet([out,retval] IDataSet **);

     HRESULT HasContent();

     HRESULT AdviseGSGraphicServices(/*IGSGraphicServices*/ void *);


   };

   [  uuid(8CAEFDD1-55E6-11d3-8365-006008BD5BC3),
      helpstring("Text Notify Interface, implement in owner's of text and call put_TextNotify(ITextNotify) on IText")
   ]
   interface ITextNotify : IUnknown {

      HRESULT DeleteText(IText *);

   };
   

   [
      uuid(8CAEFDD0-55E6-11d3-8365-006008BD5BC3),
      helpstring("G System Text Class"),
      control
   ]
   coclass Text {
      [default] interface IText;
   };

};