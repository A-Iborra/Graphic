// Copyright 2018 InnoVisioNate Inc. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import "oaidl.idl";
import "objidl.idl";

#include <olectl.h>

[ 
   uuid(8CAEFDA1-55E6-11d3-8365-006008BD5BC3),
   helpfile("DataSet.hlp"),
   helpstring("G Graphic DataSet Type Library"), 
   lcid(0x00000000), 
   version(1.0)
] 
library DataSet { 

   importlib(STDOLE_TLB);
   importlib(STDTYPE_TLB);

   importlib("Properties.tlb");
   importlib("GSystem.tlb");
   importlib("GraphicControl.tlb");
   importlib("Variable.tlb");
   importlib("Evaluator.tlb");

   [  uuid(8CAEFDA2-55E6-11d3-8365-006008BD5BC3),
      helpstring("GSystem DataSet Interface"),
      pointer_default(unique)
   ] 
   interface IDataSet : IUnknown {

      [propput] HRESULT Name([in] BSTR name);
      [propget] HRESULT Name([out,retval] BSTR *pName);

      [propput] HRESULT DataSource([in] BSTR dataSource);
      [propget] HRESULT DataSource([out,retval] BSTR *pDataSource);

      [propput] HRESULT IsFunctionSource([in] VARIANT_BOOL);
      [propget] HRESULT IsFunctionSource([out,retval] VARIANT_BOOL *);

      [propput] HRESULT IFunction([in] void *pIFunction);
      [propget] HRESULT IFunction([out,retval] void **ppIFunction);

      [propput] HRESULT IPlot([in] void *pIPlot);
      [propget] HRESULT IPlot([out,retval] void **ppIPlot);

      HRESULT Initialize(void *pvIDataSet_Domain,void *pIOpenGLImplementation,
                           IEvaluator *pIEvaluator,
                           IGProperty* pIPropertyLineColor,IGProperty* pIPropertyLineWeight,
                           IGProperty *parentPropertyPlotView,
                           IGProperty *parentPropertyDefault2DPlotSubType,
                           IGProperty *parentPropertyDefault3DPlotSubType,
                           IGProperty *parentPropertyBackgroundColor,
                           IGProperty *parentPropertyXFloor,IGProperty *parentPropertyXCeiling,
                           IGProperty *parentPropertyYFloor,IGProperty *parentPropertyYCeiling,
                           IGProperty *parentPropertyTFloor,IGProperty *parentPropertyZCeiling,
                           [in] void (*pCallback)(void *,ULONG_PTR),[in] void *pArg,ULONG_PTR cookie);

      [helpstring("Set a callback the Function can use when something has changed so the client can act accordingly. At some point, IPropertyNotifyChanged events would be implemented.")]
      [propput] HRESULT OnChangeCallback([in] void (*pCallback)(void *,ULONG_PTR),[in] void *pArg,[in] ULONG_PTR cookie);

      [propput] HRESULT maxX([in] double maxVal);
      [propget] HRESULT maxX([out,retval] double *getVal);
      [propput] HRESULT maxY([in] double maxVal);
      [propget] HRESULT maxY([out,retval] double *getVal);
      [propput] HRESULT maxZ([in] double maxVal);
      [propget] HRESULT maxZ([out,retval] double *getVal);
      [propput] HRESULT minX([in] double minVal);
      [propget] HRESULT minX([out,retval] double *getVal);
      [propput] HRESULT minY([in] double minVal);
      [propget] HRESULT minY([out,retval] double *getVal);
      [propput] HRESULT minZ([in] double minVal);
      [propget] HRESULT minZ([out,retval] double *getVal);

      [propput] HRESULT XFloor([in]IGProperty *);
      [propput] HRESULT XCeiling([in]IGProperty *);

      [propput] HRESULT YFloor([in]IGProperty *);
      [propput] HRESULT YCeiling([in]IGProperty *);

      [propput] HRESULT ZFloor([in]IGProperty *);
      [propput] HRESULT ZCeiling([in]IGProperty *);

      [propget] HRESULT top([out,retval] struct DataList **getTop);
      [propget] HRESULT bottom([out,retval] struct DataList **getBottom);

      [propget] HRESULT countPoints([out,retval]long *pCount);

      enum DataArity DataArity();

      HRESULT peek([in] struct DataList *afterItem,[out,retval] struct DataList **getItem);
      HRESULT peekInt([in] int item, [out,retval] struct DataList **getItem);

      HRESULT peekGDI([in] struct DataList *afterItem,[out,retval] struct DataList **getItem);

      HRESULT get(struct DataList *afterItem,struct DataPoint *data,struct DataList **nextItem);
      HRESULT set(struct DataList *item,struct DataPoint *data);

      HRESULT pushString(char *valueString);

      HRESULT pushDataPoint(struct DataPoint *point);

      HRESULT popDataPoint(struct DataPoint *point);

      HRESULT ReSet();

      HRESULT insert(struct DataList *insertBefore,struct DataPoint *data);

      HRESULT addXYZ(double *x,double *y,double *z);

      HRESULT addMovePoint();

      HRESULT makeUnitSize();

      HRESULT ResetLimits(struct DataPoint *);

      HRESULT SetDomain(struct DataPoint* minPoint,struct DataPoint* maxPoint);

      HRESULT SetDomainXYZ(double *xmin,double *ymin,double *zmin,double *xmax,double *ymax,double *zmax);

      HRESULT GetDomain(struct DataPoint* minPoint,struct DataPoint* maxPoint);

      HRESULT IncludeDomain(IDataSet* pTheOtherDataSet);

      [propget] HRESULT IsIncludedDomain([in]IDataSet*pOtherDataSet,[out,retval]boolean *);

      HRESULT RemoveIncludedDomain(IDataSet* pTheOtherDataSet);

      HRESULT SetColorRGB(double *red,double *green,double *blue);

      HRESULT Scale(struct DataPoint* scaleVector);

      HRESULT Translate(struct DataPoint* translate);

      HRESULT TranslateGDI(POINT *ptGDI);

      HRESULT Rotate(char axis,double degrees);

      HRESULT RotateVector(double angle,struct DataPoint *v);

      HRESULT Move(struct DataPoint* toPoint);

      HRESULT Shear(char axis,double ratio);

      HRESULT GenerateBoundingBox(IDataSet* pIDataSetBoundingBox);

      HRESULT GenerateGDICoordinates(void *pIOpenGLImplementation);

      HRESULT PushExtents();
      
      HRESULT PopExtents();

      HRESULT Evaluate(BSTR expression,double *result);

      HRESULT GetDomainGDI(struct DataPoint* minPoint,struct DataPoint* maxPoint);

      [helpstring("Starts sending the data to whomever is listening on the IDataSetEvents interface.")]
      HRESULT Start();

      [helpstring("Use this method to provide an implementation of IGSystemStatusBar to the object - the interface is not AddRef()ed")]
      HRESULT AdviseGSystemStatusBar(IGSystemStatusBar *);

      HRESULT AdviseGSGraphicServices(/*IGSGraphicServices*/ void *);

   };


   [uuid(8CAEFDA3-55E6-11d3-8365-006008BD5BC3),helpstring("DataSet Events Interface")]
   interface IDataSetEvents : IUnknown {

      [helpstring("The DataSet sends this event before evaluation of the expression. This is a good point to clear your \"dataspace\" as fresh data will soon be coming.")]
      HRESULT Clear();

      [ helpstring("The DataSet sends this event after it has determined the number of values it will produce.")]
      HRESULT Started([in]long cntExpectedResults);

      [helpstring("This event supplies the client with the data, passing the iteration Number, the number of values in the array of variable names and the array of variable values.")]
      HRESULT TakeValues([in]long iterationNo,[in]long valueCount,[in]SAFEARRAY(BSTR)* pNamesArrayOfStrings,[in]SAFEARRAY(double)* pValuesArrayOfDoubles);

      [helpstring("The DataSet is finished sending the data.")]
      HRESULT Finished();

   };
  
   [
      uuid(8CAEFDA4-55E6-11d3-8365-006008BD5BC3),
      helpstring("GSystem Class DataSet"),
      control
   ]
   coclass DataSet {
      [default] interface IDataSet;
      [default,source] interface IDataSetEvents;
   };

};